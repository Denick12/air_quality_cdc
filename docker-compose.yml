version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper_air
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka_air
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper

  postgres:
    image: postgres:15
    container_name: postgres_air
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airquality
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  debezium:
    image: debezium/connect:2.7.0.Final
    container_name: debezium_connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_status
    depends_on:
      - kafka
      - postgres

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb_air
    environment:
      POSTGRES_USER: grafana
      POSTGRES_PASSWORD: grafana
      POSTGRES_DB: metrics
    ports:
      - "5433:5432"

  consumer:
    build: ./consumer
    container_name: consumer_air
    depends_on:
      - kafka
      - timescaledb
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: airquality.public.air_quality
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DB: metrics
      TIMESCALE_USER: grafana
      TIMESCALE_PASSWORD: grafana

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana_air
    ports:
      - "3000:3000"
    depends_on:
      - timescaledb
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning

  airflow:
    build: ./airflow
    container_name: airflow_air
    restart: always
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=yourfernetkeyhere
      - AIRFLOW__WEBSERVER__SECRET_KEY=yoursecretkeyhere
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      - postgres
    command: >
      bash -c "airflow db init &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
               airflow webserver --port 8080"
